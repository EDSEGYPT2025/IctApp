@page "{unitId:int}"
@model IctApp.Pages.QuizModel
@{
    ViewData["Title"] = "الاختبار";
}

<style>
    /* Custom styles for animations and transitions */
    .fade-in {
        animation: fadeIn 0.6s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }
</style>

<div class="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-blue-50 py-6 sm:py-12 px-4">
    <div class="quiz-container max-w-3xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden fade-in">
        @Html.AntiForgeryToken()
        @if (Model.IsQuizFinished)
        {
            <div class="p-8 sm:p-12 text-center">
                <i class="fas fa-trophy text-7xl text-yellow-400 mb-6"></i>
                <h1 class="text-3xl sm:text-4xl font-extrabold text-gray-800">لقد أكملت الاختبار!</h1>
                <p class="mt-4 text-lg text-gray-600">نتيجتك النهائية هي:</p>
                <p class="my-6 text-7xl font-bold text-indigo-600">@Model.Score<span class="text-3xl text-gray-400"> / @Model.TotalQuestions</span></p>

                @if (((double)Model.Score / Model.TotalQuestions) >= 0.8)
                {
                    <p class="text-green-600 font-semibold"><i class="fas fa-check-circle"></i> أداء رائع! أنت مستعد تمامًا.</p>
                }
                else if (((double)Model.Score / Model.TotalQuestions) >= 0.5)
                {
                    <p class="text-yellow-600 font-semibold"><i class="fas fa-star"></i> جيد جدًا! استمر في المراجعة.</p>
                }
                else
                {
                    <p class="text-red-600 font-semibold"><i class="fas fa-exclamation-triangle"></i> تحتاج إلى المزيد من المراجعة. لا تستسلم!</p>
                }

                <div class="mt-8 flex flex-col sm:flex-row justify-center gap-4">
                    <a href="/Learn/Index?unitId=@Model.UnitId" class="px-6 py-3 bg-indigo-100 text-indigo-700 font-bold rounded-lg shadow-sm hover:bg-indigo-200 transition-colors duration-300">العودة إلى الوحدة</a>
                    <a href="/Learn/Index" class="px-6 py-3 bg-indigo-600 text-white font-bold rounded-lg shadow-md hover:bg-indigo-700 transition-colors duration-300">اختيار وحدة أخرى</a>
                </div>
            </div>
        }
        else if (Model.CurrentQuestion != null)
        {
            <div class="p-6 sm:p-8">
                <!-- Progress Bar -->
                <div>
                    <div class="flex justify-between mb-1">
                        <span class="text-base font-medium text-indigo-700">التقدم</span>
                        <span class="text-sm font-medium text-indigo-700">@(Model.QuestionIndex + 1) / @Model.TotalQuestions</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        @{
                            var progressPercentage = ((double)(Model.QuestionIndex + 1) / Model.TotalQuestions) * 100;
                        }
                        <div class="bg-indigo-600 h-2.5 rounded-full transition-all duration-500" style="width: @progressPercentage%"></div>
                    </div>
                </div>

                <h2 class="my-6 text-2xl font-bold text-gray-900 text-center leading-relaxed">@Model.CurrentQuestion.QuestionText</h2>

                <div id="feedback-message" class="alert p-4 mb-4 text-center rounded-lg" role="alert" style="display: none;"></div>

                <div id="options-container" class="space-y-4">
                    @foreach (var option in Model.CurrentQuestion.Options)
                    {
                        <label class="option-label group flex items-center justify-between w-full p-4 bg-gray-50 border-2 border-gray-200 rounded-lg cursor-pointer transition-all duration-200 hover:border-indigo-500 hover:bg-indigo-50" id="label-@option.Id" for="option-@option.Id">
                            <span class="font-semibold text-gray-700">@option.OptionText</span>
                            <div class="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center transition-all duration-200 group-hover:border-indigo-500">
                                <div class="w-3 h-3 rounded-full"></div>
                            </div>
                            <input type="radio" name="selectedOption" value="@option.Id" id="option-@option.Id" class="hidden option-input" />
                        </label>
                    }
                </div>

                <div class="explanation mt-6 p-4 bg-blue-50 border-r-4 border-blue-500 rounded-md" id="explanation-box" style="display: none;">
                    <h5 class="font-bold text-blue-800"><i class="fas fa-lightbulb mr-2"></i>الشرح:</h5>
                    <p id="explanation-text" class="text-gray-700 mt-2"></p>
                </div>

                <form method="get" id="next-question-form" class="mt-6 text-center">
                    <input type="hidden" name="unitId" value="@Model.UnitId" />
                    <input type="hidden" name="questionIndex" value="@(Model.QuestionIndex + 1)" />
                    <input type="hidden" name="score" id="score-input" value="@Model.Score" />
                    <button type="submit" id="next-question-btn" class="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg shadow-md hover:bg-indigo-700 transition-colors duration-300 transform hover:scale-105" style="display:none;">
                        السؤال التالي <i class="fas fa-arrow-left mr-2"></i>
                    </button>
                </form>
            </div>
        }
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const optionsContainer = document.getElementById('options-container');
        if (!optionsContainer) return;

        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        let audioStarted = false;

        // --- Sound Functions ---
        function playCorrectSound() {
            const synth = new Tone.Synth().toDestination();
            const now = Tone.now();
            synth.triggerAttackRelease("C4", "8n", now);
            synth.triggerAttackRelease("E4", "8n", now + 0.1);
            synth.triggerAttackRelease("G4", "8n", now + 0.2);
        }

        function playIncorrectSound() {
            const synth = new Tone.Synth().toDestination();
            synth.triggerAttackRelease("C3", "8n");
        }

        optionsContainer.addEventListener('click', function(event) {
            const label = event.target.closest('.option-label');
            if (!label || label.classList.contains('disabled')) return;

            // Start audio context on first user interaction
            if (!audioStarted) {
                Tone.start();
                audioStarted = true;
            }

            const optionInput = document.getElementById(label.htmlFor);
            if(optionInput) {
                checkAnswer(parseInt(optionInput.value));
            }
        });

        async function checkAnswer(selectedOptionId) {
            document.querySelectorAll('.option-label').forEach(l => l.classList.add('pointer-events-none', 'opacity-70'));

            const feedbackMessage = document.getElementById('feedback-message');
            feedbackMessage.innerHTML = "⏳<span class='animate-pulse'> جاري التحقق...</span>";
            feedbackMessage.className = 'alert p-4 mb-4 text-center rounded-lg text-blue-800 bg-blue-100';
            feedbackMessage.style.display = 'block';

            try {
                const response = await fetch('/Quiz/@Model.UnitId?handler=CheckAnswer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ optionId: selectedOptionId })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok.');
                }

                const result = await response.json();
                const selectedLabel = document.getElementById(`label-${selectedOptionId}`);

                const resetStyles = (el) => {
                    const circle = el.querySelector('div > div');
                    circle.className = 'w-3 h-3 rounded-full';
                    el.className = 'option-label group flex items-center justify-between w-full p-4 bg-gray-50 border-2 border-gray-200 rounded-lg cursor-pointer transition-all duration-200 pointer-events-none opacity-70';
                };

                document.querySelectorAll('.option-label').forEach(resetStyles);

                if (result.isCorrect) {
                    playCorrectSound();
                    selectedLabel.classList.remove('bg-gray-50', 'border-gray-200');
                    selectedLabel.classList.add('bg-green-100', 'border-green-500');
                    selectedLabel.querySelector('div > div').classList.add('bg-green-500');

                    const scoreInput = document.getElementById('score-input');
                    scoreInput.value = parseInt(scoreInput.value) + 1;

                    feedbackMessage.innerHTML = '<i class="fas fa-check-circle mr-2"></i> إجابة صحيحة!';
                    feedbackMessage.className = 'alert p-4 mb-4 text-center rounded-lg text-green-800 bg-green-100';
                } else {
                    playIncorrectSound();
                    selectedLabel.classList.remove('bg-gray-50', 'border-gray-200');
                    selectedLabel.classList.add('bg-red-100', 'border-red-500');
                    selectedLabel.querySelector('div > div').classList.add('bg-red-500');

                    const correctLabel = document.getElementById(`label-${result.correctOptionId}`);
                    if(correctLabel) {
                        correctLabel.classList.remove('bg-gray-50', 'border-gray-200');
                        correctLabel.classList.add('bg-green-100', 'border-green-500');
                        correctLabel.querySelector('div > div').classList.add('bg-green-500');
                    }
                    feedbackMessage.innerHTML = '<i class="fas fa-times-circle mr-2"></i> إجابة خاطئة!';
                    feedbackMessage.className = 'alert p-4 mb-4 text-center rounded-lg text-red-800 bg-red-100';
                }

                const explanationBox = document.getElementById('explanation-box');
                const explanationText = document.getElementById('explanation-text');
                if (result.explanation) {
                    explanationText.textContent = result.explanation;
                    explanationBox.style.display = 'block';
                }

                document.getElementById('next-question-btn').style.display = 'inline-block';

            } catch (error) {
                console.error('Error:', error);
                feedbackMessage.textContent = '⚠️ حدث خطأ أثناء التحقق. يرجى المحاولة مرة أخرى.';
                feedbackMessage.className = 'alert p-4 mb-4 text-center rounded-lg text-yellow-800 bg-yellow-100';
                document.querySelectorAll('.option-label').forEach(l => {
                    l.classList.remove('pointer-events-none', 'opacity-70');
                });
            }
        }
    });
    </script>
}

